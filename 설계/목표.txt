---- 1차 목표 : 최소 기능 구현 -----

더미 유저 생성
공연 생성
공연 스케줄 생성(좌석 생성)
티켓 오픈 시간 설정( 예매 시간 )

좌석 현황
좌석 예매

좌석 선택 입장 대기열
티켓 결제 취소 & 환불

1. 좌석 db 설계
    공연 - 티켓 - 유저 서비스 모듈 설계

2. 클라이언트에게 좌석 현황을 보내주는 api를 보내주는 상황에 있어서 트래픽이 몰릴 때 서버 과부화 문제?
    db에서 api 호출 시 마다 좌석 상태를 파악하고 보내주는 것은 매우 많은 db 커넥션이 발생할 것
    => 좌석 현황을 캐시에서 관리, 웹소켓을 이용한 실시간 관리

3. 예매 후 10분 이내에 결제하지 않을 시 취소 처리 ( 타임아웃 )
    1 - 조회 시점에 상태를 갱신
    2 - 스케쥴러 or 배치로 정기적 상태 업데이트

---- 2차 목표 : 비 기능 요구사항 달성 ------

 ( 자세한 목표 설정 필요 )

동시성 제어
api 성능 ( 높은 처리량 )
배치 처리
로그, 모니터링, 감사사
장애 대응 / 트래픽 폭주 대비

---- 3차 목표 : 확장 기능 ----












-----------------------------
티켓팅이 몰릴만한 공연?
어떻게 다르게 할수있을까??



### 기술 선택 이유 - Redis

티켓팅 시스템은 초단기 고트래픽 환경에서 좌석 상태 동기화, 중복 예매 방지, 실시간 알림 전송 등 다양한 요구사항을 수반합니다.  
단순한 캐시 이상의 역할이 필요했기 때문에, 다음과 같은 이유로 Redis를 선택했습니다:

- 좌석 상태 TTL 설정으로 결제 시간 만료 자동화
- Redisson 기반 분산 락으로 예매 경쟁 제어
- pub/sub을 활용한 WebSocket 알림 구조
- 멀티 인스턴스 환경에서도 데이터 일관성 유지